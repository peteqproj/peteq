/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SensorRunRequestBody struct for SensorRunRequestBody
type SensorRunRequestBody struct {
	Data *map[string]interface{} `json:"data,omitempty"`
	Id   string                  `json:"id"`
}

// NewSensorRunRequestBody instantiates a new SensorRunRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorRunRequestBody(id string) *SensorRunRequestBody {
	this := SensorRunRequestBody{}
	this.Id = id
	return &this
}

// NewSensorRunRequestBodyWithDefaults instantiates a new SensorRunRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorRunRequestBodyWithDefaults() *SensorRunRequestBody {
	this := SensorRunRequestBody{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SensorRunRequestBody) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorRunRequestBody) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SensorRunRequestBody) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *SensorRunRequestBody) SetData(v map[string]interface{}) {
	o.Data = &v
}

// GetId returns the Id field value
func (o *SensorRunRequestBody) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SensorRunRequestBody) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SensorRunRequestBody) SetId(v string) {
	o.Id = v
}

func (o SensorRunRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableSensorRunRequestBody struct {
	value *SensorRunRequestBody
	isSet bool
}

func (v NullableSensorRunRequestBody) Get() *SensorRunRequestBody {
	return v.value
}

func (v *NullableSensorRunRequestBody) Set(val *SensorRunRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorRunRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorRunRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorRunRequestBody(val *SensorRunRequestBody) *NullableSensorRunRequestBody {
	return &NullableSensorRunRequestBody{value: val, isSet: true}
}

func (v NullableSensorRunRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorRunRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
