/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ProjectsProjectsView struct for ProjectsProjectsView
type ProjectsProjectsView struct {
	Projects *[]ProjectsPopulatedProject `json:"projects,omitempty"`
}

// NewProjectsProjectsView instantiates a new ProjectsProjectsView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsProjectsView() *ProjectsProjectsView {
	this := ProjectsProjectsView{}
	return &this
}

// NewProjectsProjectsViewWithDefaults instantiates a new ProjectsProjectsView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsProjectsViewWithDefaults() *ProjectsProjectsView {
	this := ProjectsProjectsView{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ProjectsProjectsView) GetProjects() []ProjectsPopulatedProject {
	if o == nil || o.Projects == nil {
		var ret []ProjectsPopulatedProject
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsProjectsView) GetProjectsOk() (*[]ProjectsPopulatedProject, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ProjectsProjectsView) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ProjectsPopulatedProject and assigns it to the Projects field.
func (o *ProjectsProjectsView) SetProjects(v []ProjectsPopulatedProject) {
	o.Projects = &v
}

func (o ProjectsProjectsView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsProjectsView struct {
	value *ProjectsProjectsView
	isSet bool
}

func (v NullableProjectsProjectsView) Get() *ProjectsProjectsView {
	return v.value
}

func (v *NullableProjectsProjectsView) Set(val *ProjectsProjectsView) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsProjectsView) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsProjectsView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsProjectsView(val *ProjectsProjectsView) *NullableProjectsProjectsView {
	return &NullableProjectsProjectsView{value: val, isSet: true}
}

func (v NullableProjectsProjectsView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsProjectsView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


