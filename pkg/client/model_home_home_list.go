/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// HomeHomeList struct for HomeHomeList
type HomeHomeList struct {
	Metadata *ListMetadata   `json:"metadata,omitempty"`
	Spec     *ListSpec       `json:"spec,omitempty"`
	Tasks    *[]HomeHomeTask `json:"tasks,omitempty"`
}

// NewHomeHomeList instantiates a new HomeHomeList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHomeHomeList() *HomeHomeList {
	this := HomeHomeList{}
	return &this
}

// NewHomeHomeListWithDefaults instantiates a new HomeHomeList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHomeHomeListWithDefaults() *HomeHomeList {
	this := HomeHomeList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *HomeHomeList) GetMetadata() ListMetadata {
	if o == nil || o.Metadata == nil {
		var ret ListMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeHomeList) GetMetadataOk() (*ListMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *HomeHomeList) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ListMetadata and assigns it to the Metadata field.
func (o *HomeHomeList) SetMetadata(v ListMetadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *HomeHomeList) GetSpec() ListSpec {
	if o == nil || o.Spec == nil {
		var ret ListSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeHomeList) GetSpecOk() (*ListSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *HomeHomeList) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given ListSpec and assigns it to the Spec field.
func (o *HomeHomeList) SetSpec(v ListSpec) {
	o.Spec = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *HomeHomeList) GetTasks() []HomeHomeTask {
	if o == nil || o.Tasks == nil {
		var ret []HomeHomeTask
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeHomeList) GetTasksOk() (*[]HomeHomeTask, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *HomeHomeList) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []HomeHomeTask and assigns it to the Tasks field.
func (o *HomeHomeList) SetTasks(v []HomeHomeTask) {
	o.Tasks = &v
}

func (o HomeHomeList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	return json.Marshal(toSerialize)
}

type NullableHomeHomeList struct {
	value *HomeHomeList
	isSet bool
}

func (v NullableHomeHomeList) Get() *HomeHomeList {
	return v.value
}

func (v *NullableHomeHomeList) Set(val *HomeHomeList) {
	v.value = val
	v.isSet = true
}

func (v NullableHomeHomeList) IsSet() bool {
	return v.isSet
}

func (v *NullableHomeHomeList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomeHomeList(val *HomeHomeList) *NullableHomeHomeList {
	return &NullableHomeHomeList{value: val, isSet: true}
}

func (v NullableHomeHomeList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomeHomeList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
