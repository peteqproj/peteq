/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TriggersTriggersView struct for TriggersTriggersView
type TriggersTriggersView struct {
	Triggers *[]TriggersTriggerViewItem `json:"triggers,omitempty"`
}

// NewTriggersTriggersView instantiates a new TriggersTriggersView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggersTriggersView() *TriggersTriggersView {
	this := TriggersTriggersView{}
	return &this
}

// NewTriggersTriggersViewWithDefaults instantiates a new TriggersTriggersView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggersTriggersViewWithDefaults() *TriggersTriggersView {
	this := TriggersTriggersView{}
	return &this
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *TriggersTriggersView) GetTriggers() []TriggersTriggerViewItem {
	if o == nil || o.Triggers == nil {
		var ret []TriggersTriggerViewItem
		return ret
	}
	return *o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggersTriggersView) GetTriggersOk() (*[]TriggersTriggerViewItem, bool) {
	if o == nil || o.Triggers == nil {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *TriggersTriggersView) HasTriggers() bool {
	if o != nil && o.Triggers != nil {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []TriggersTriggerViewItem and assigns it to the Triggers field.
func (o *TriggersTriggersView) SetTriggers(v []TriggersTriggerViewItem) {
	o.Triggers = &v
}

func (o TriggersTriggersView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Triggers != nil {
		toSerialize["triggers"] = o.Triggers
	}
	return json.Marshal(toSerialize)
}

type NullableTriggersTriggersView struct {
	value *TriggersTriggersView
	isSet bool
}

func (v NullableTriggersTriggersView) Get() *TriggersTriggersView {
	return v.value
}

func (v *NullableTriggersTriggersView) Set(val *TriggersTriggersView) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggersTriggersView) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggersTriggersView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggersTriggersView(val *TriggersTriggersView) *NullableTriggersTriggersView {
	return &NullableTriggersTriggersView{value: val, isSet: true}
}

func (v NullableTriggersTriggersView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggersTriggersView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
