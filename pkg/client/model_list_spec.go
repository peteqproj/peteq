/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ListSpec struct for ListSpec
type ListSpec struct {
	Index *float32  `json:"index,omitempty"`
	Tasks *[]string `json:"tasks,omitempty"`
}

// NewListSpec instantiates a new ListSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSpec() *ListSpec {
	this := ListSpec{}
	return &this
}

// NewListSpecWithDefaults instantiates a new ListSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSpecWithDefaults() *ListSpec {
	this := ListSpec{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ListSpec) GetIndex() float32 {
	if o == nil || o.Index == nil {
		var ret float32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSpec) GetIndexOk() (*float32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ListSpec) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given float32 and assigns it to the Index field.
func (o *ListSpec) SetIndex(v float32) {
	o.Index = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ListSpec) GetTasks() []string {
	if o == nil || o.Tasks == nil {
		var ret []string
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSpec) GetTasksOk() (*[]string, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ListSpec) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []string and assigns it to the Tasks field.
func (o *ListSpec) SetTasks(v []string) {
	o.Tasks = &v
}

func (o ListSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	return json.Marshal(toSerialize)
}

type NullableListSpec struct {
	value *ListSpec
	isSet bool
}

func (v NullableListSpec) Get() *ListSpec {
	return v.value
}

func (v *NullableListSpec) Set(val *ListSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableListSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableListSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSpec(val *ListSpec) *NullableListSpec {
	return &NullableListSpec{value: val, isSet: true}
}

func (v NullableListSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
