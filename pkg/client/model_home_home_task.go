/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// HomeHomeTask struct for HomeHomeTask
type HomeHomeTask struct {
	Project *ProjectProject `json:"project,omitempty"`
	Task    *TaskTask       `json:"task,omitempty"`
}

// NewHomeHomeTask instantiates a new HomeHomeTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHomeHomeTask() *HomeHomeTask {
	this := HomeHomeTask{}
	return &this
}

// NewHomeHomeTaskWithDefaults instantiates a new HomeHomeTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHomeHomeTaskWithDefaults() *HomeHomeTask {
	this := HomeHomeTask{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *HomeHomeTask) GetProject() ProjectProject {
	if o == nil || o.Project == nil {
		var ret ProjectProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeHomeTask) GetProjectOk() (*ProjectProject, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *HomeHomeTask) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectProject and assigns it to the Project field.
func (o *HomeHomeTask) SetProject(v ProjectProject) {
	o.Project = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *HomeHomeTask) GetTask() TaskTask {
	if o == nil || o.Task == nil {
		var ret TaskTask
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeHomeTask) GetTaskOk() (*TaskTask, bool) {
	if o == nil || o.Task == nil {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *HomeHomeTask) HasTask() bool {
	if o != nil && o.Task != nil {
		return true
	}

	return false
}

// SetTask gets a reference to the given TaskTask and assigns it to the Task field.
func (o *HomeHomeTask) SetTask(v TaskTask) {
	o.Task = &v
}

func (o HomeHomeTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Task != nil {
		toSerialize["task"] = o.Task
	}
	return json.Marshal(toSerialize)
}

type NullableHomeHomeTask struct {
	value *HomeHomeTask
	isSet bool
}

func (v NullableHomeHomeTask) Get() *HomeHomeTask {
	return v.value
}

func (v *NullableHomeHomeTask) Set(val *HomeHomeTask) {
	v.value = val
	v.isSet = true
}

func (v NullableHomeHomeTask) IsSet() bool {
	return v.isSet
}

func (v *NullableHomeHomeTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomeHomeTask(val *HomeHomeTask) *NullableHomeHomeTask {
	return &NullableHomeHomeTask{value: val, isSet: true}
}

func (v NullableHomeHomeTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomeHomeTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
