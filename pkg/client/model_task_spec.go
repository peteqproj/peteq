/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TaskSpec struct for TaskSpec
type TaskSpec struct {
	Completed *bool `json:"completed,omitempty"`
}

// NewTaskSpec instantiates a new TaskSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskSpec() *TaskSpec {
	this := TaskSpec{}
	return &this
}

// NewTaskSpecWithDefaults instantiates a new TaskSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskSpecWithDefaults() *TaskSpec {
	this := TaskSpec{}
	return &this
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *TaskSpec) GetCompleted() bool {
	if o == nil || o.Completed == nil {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskSpec) GetCompletedOk() (*bool, bool) {
	if o == nil || o.Completed == nil {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *TaskSpec) HasCompleted() bool {
	if o != nil && o.Completed != nil {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *TaskSpec) SetCompleted(v bool) {
	o.Completed = &v
}

func (o TaskSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Completed != nil {
		toSerialize["completed"] = o.Completed
	}
	return json.Marshal(toSerialize)
}

type NullableTaskSpec struct {
	value *TaskSpec
	isSet bool
}

func (v NullableTaskSpec) Get() *TaskSpec {
	return v.value
}

func (v *NullableTaskSpec) Set(val *TaskSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskSpec(val *TaskSpec) *NullableTaskSpec {
	return &NullableTaskSpec{value: val, isSet: true}
}

func (v NullableTaskSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
