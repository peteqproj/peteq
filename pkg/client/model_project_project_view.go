/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ProjectProjectView struct for ProjectProjectView
type ProjectProjectView struct {
	Project *ProjectProject `json:"project,omitempty"`
	Tasks   *[]TaskTask     `json:"tasks,omitempty"`
}

// NewProjectProjectView instantiates a new ProjectProjectView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectProjectView() *ProjectProjectView {
	this := ProjectProjectView{}
	return &this
}

// NewProjectProjectViewWithDefaults instantiates a new ProjectProjectView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectProjectViewWithDefaults() *ProjectProjectView {
	this := ProjectProjectView{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ProjectProjectView) GetProject() ProjectProject {
	if o == nil || o.Project == nil {
		var ret ProjectProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProjectView) GetProjectOk() (*ProjectProject, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ProjectProjectView) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectProject and assigns it to the Project field.
func (o *ProjectProjectView) SetProject(v ProjectProject) {
	o.Project = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ProjectProjectView) GetTasks() []TaskTask {
	if o == nil || o.Tasks == nil {
		var ret []TaskTask
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProjectView) GetTasksOk() (*[]TaskTask, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ProjectProjectView) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []TaskTask and assigns it to the Tasks field.
func (o *ProjectProjectView) SetTasks(v []TaskTask) {
	o.Tasks = &v
}

func (o ProjectProjectView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	return json.Marshal(toSerialize)
}

type NullableProjectProjectView struct {
	value *ProjectProjectView
	isSet bool
}

func (v NullableProjectProjectView) Get() *ProjectProjectView {
	return v.value
}

func (v *NullableProjectProjectView) Set(val *ProjectProjectView) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectProjectView) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectProjectView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectProjectView(val *ProjectProjectView) *NullableProjectProjectView {
	return &NullableProjectProjectView{value: val, isSet: true}
}

func (v NullableProjectProjectView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectProjectView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
