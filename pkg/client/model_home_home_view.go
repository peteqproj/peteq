/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// HomeHomeView struct for HomeHomeView
type HomeHomeView struct {
	Lists *[]HomeHomeList `json:"lists,omitempty"`
}

// NewHomeHomeView instantiates a new HomeHomeView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHomeHomeView() *HomeHomeView {
	this := HomeHomeView{}
	return &this
}

// NewHomeHomeViewWithDefaults instantiates a new HomeHomeView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHomeHomeViewWithDefaults() *HomeHomeView {
	this := HomeHomeView{}
	return &this
}

// GetLists returns the Lists field value if set, zero value otherwise.
func (o *HomeHomeView) GetLists() []HomeHomeList {
	if o == nil || o.Lists == nil {
		var ret []HomeHomeList
		return ret
	}
	return *o.Lists
}

// GetListsOk returns a tuple with the Lists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeHomeView) GetListsOk() (*[]HomeHomeList, bool) {
	if o == nil || o.Lists == nil {
		return nil, false
	}
	return o.Lists, true
}

// HasLists returns a boolean if a field has been set.
func (o *HomeHomeView) HasLists() bool {
	if o != nil && o.Lists != nil {
		return true
	}

	return false
}

// SetLists gets a reference to the given []HomeHomeList and assigns it to the Lists field.
func (o *HomeHomeView) SetLists(v []HomeHomeList) {
	o.Lists = &v
}

func (o HomeHomeView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Lists != nil {
		toSerialize["lists"] = o.Lists
	}
	return json.Marshal(toSerialize)
}

type NullableHomeHomeView struct {
	value *HomeHomeView
	isSet bool
}

func (v NullableHomeHomeView) Get() *HomeHomeView {
	return v.value
}

func (v *NullableHomeHomeView) Set(val *HomeHomeView) {
	v.value = val
	v.isSet = true
}

func (v NullableHomeHomeView) IsSet() bool {
	return v.isSet
}

func (v *NullableHomeHomeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomeHomeView(val *HomeHomeView) *NullableHomeHomeView {
	return &NullableHomeHomeView{value: val, isSet: true}
}

func (v NullableHomeHomeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomeHomeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


