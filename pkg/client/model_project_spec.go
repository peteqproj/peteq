/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ProjectSpec struct for ProjectSpec
type ProjectSpec struct {
	Color    *string   `json:"color,omitempty"`
	ImageUrl *string   `json:"imageUrl,omitempty"`
	Tasks    *[]string `json:"tasks,omitempty"`
}

// NewProjectSpec instantiates a new ProjectSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSpec() *ProjectSpec {
	this := ProjectSpec{}
	return &this
}

// NewProjectSpecWithDefaults instantiates a new ProjectSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSpecWithDefaults() *ProjectSpec {
	this := ProjectSpec{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ProjectSpec) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSpec) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ProjectSpec) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *ProjectSpec) SetColor(v string) {
	o.Color = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *ProjectSpec) GetImageUrl() string {
	if o == nil || o.ImageUrl == nil {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSpec) GetImageUrlOk() (*string, bool) {
	if o == nil || o.ImageUrl == nil {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *ProjectSpec) HasImageUrl() bool {
	if o != nil && o.ImageUrl != nil {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *ProjectSpec) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ProjectSpec) GetTasks() []string {
	if o == nil || o.Tasks == nil {
		var ret []string
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectSpec) GetTasksOk() (*[]string, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ProjectSpec) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []string and assigns it to the Tasks field.
func (o *ProjectSpec) SetTasks(v []string) {
	o.Tasks = &v
}

func (o ProjectSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.ImageUrl != nil {
		toSerialize["imageUrl"] = o.ImageUrl
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	return json.Marshal(toSerialize)
}

type NullableProjectSpec struct {
	value *ProjectSpec
	isSet bool
}

func (v NullableProjectSpec) Get() *ProjectSpec {
	return v.value
}

func (v *NullableProjectSpec) Set(val *ProjectSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSpec(val *ProjectSpec) *NullableProjectSpec {
	return &NullableProjectSpec{value: val, isSet: true}
}

func (v NullableProjectSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
