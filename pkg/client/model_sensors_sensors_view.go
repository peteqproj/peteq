/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SensorsSensorsView struct for SensorsSensorsView
type SensorsSensorsView struct {
	Sensors *[]SensorsSensorViewItem `json:"sensors,omitempty"`
}

// NewSensorsSensorsView instantiates a new SensorsSensorsView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorsSensorsView() *SensorsSensorsView {
	this := SensorsSensorsView{}
	return &this
}

// NewSensorsSensorsViewWithDefaults instantiates a new SensorsSensorsView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorsSensorsViewWithDefaults() *SensorsSensorsView {
	this := SensorsSensorsView{}
	return &this
}

// GetSensors returns the Sensors field value if set, zero value otherwise.
func (o *SensorsSensorsView) GetSensors() []SensorsSensorViewItem {
	if o == nil || o.Sensors == nil {
		var ret []SensorsSensorViewItem
		return ret
	}
	return *o.Sensors
}

// GetSensorsOk returns a tuple with the Sensors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorsSensorsView) GetSensorsOk() (*[]SensorsSensorViewItem, bool) {
	if o == nil || o.Sensors == nil {
		return nil, false
	}
	return o.Sensors, true
}

// HasSensors returns a boolean if a field has been set.
func (o *SensorsSensorsView) HasSensors() bool {
	if o != nil && o.Sensors != nil {
		return true
	}

	return false
}

// SetSensors gets a reference to the given []SensorsSensorViewItem and assigns it to the Sensors field.
func (o *SensorsSensorsView) SetSensors(v []SensorsSensorViewItem) {
	o.Sensors = &v
}

func (o SensorsSensorsView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sensors != nil {
		toSerialize["sensors"] = o.Sensors
	}
	return json.Marshal(toSerialize)
}

type NullableSensorsSensorsView struct {
	value *SensorsSensorsView
	isSet bool
}

func (v NullableSensorsSensorsView) Get() *SensorsSensorsView {
	return v.value
}

func (v *NullableSensorsSensorsView) Set(val *SensorsSensorsView) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorsSensorsView) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorsSensorsView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorsSensorsView(val *SensorsSensorsView) *NullableSensorsSensorsView {
	return &NullableSensorsSensorsView{value: val, isSet: true}
}

func (v NullableSensorsSensorsView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorsSensorsView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
