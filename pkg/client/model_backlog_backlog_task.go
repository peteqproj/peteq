/*
 * Peteq API
 *
 * Peteq OpenAPI spec.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// BacklogBacklogTask struct for BacklogBacklogTask
type BacklogBacklogTask struct {
	List    *BacklogBacklogTaskList    `json:"list,omitempty"`
	Project *BacklogBacklogTaskProject `json:"project,omitempty"`
	Task    *TaskTask                  `json:"task,omitempty"`
}

// NewBacklogBacklogTask instantiates a new BacklogBacklogTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBacklogBacklogTask() *BacklogBacklogTask {
	this := BacklogBacklogTask{}
	return &this
}

// NewBacklogBacklogTaskWithDefaults instantiates a new BacklogBacklogTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBacklogBacklogTaskWithDefaults() *BacklogBacklogTask {
	this := BacklogBacklogTask{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *BacklogBacklogTask) GetList() BacklogBacklogTaskList {
	if o == nil || o.List == nil {
		var ret BacklogBacklogTaskList
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BacklogBacklogTask) GetListOk() (*BacklogBacklogTaskList, bool) {
	if o == nil || o.List == nil {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *BacklogBacklogTask) HasList() bool {
	if o != nil && o.List != nil {
		return true
	}

	return false
}

// SetList gets a reference to the given BacklogBacklogTaskList and assigns it to the List field.
func (o *BacklogBacklogTask) SetList(v BacklogBacklogTaskList) {
	o.List = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *BacklogBacklogTask) GetProject() BacklogBacklogTaskProject {
	if o == nil || o.Project == nil {
		var ret BacklogBacklogTaskProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BacklogBacklogTask) GetProjectOk() (*BacklogBacklogTaskProject, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *BacklogBacklogTask) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given BacklogBacklogTaskProject and assigns it to the Project field.
func (o *BacklogBacklogTask) SetProject(v BacklogBacklogTaskProject) {
	o.Project = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *BacklogBacklogTask) GetTask() TaskTask {
	if o == nil || o.Task == nil {
		var ret TaskTask
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BacklogBacklogTask) GetTaskOk() (*TaskTask, bool) {
	if o == nil || o.Task == nil {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *BacklogBacklogTask) HasTask() bool {
	if o != nil && o.Task != nil {
		return true
	}

	return false
}

// SetTask gets a reference to the given TaskTask and assigns it to the Task field.
func (o *BacklogBacklogTask) SetTask(v TaskTask) {
	o.Task = &v
}

func (o BacklogBacklogTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.List != nil {
		toSerialize["list"] = o.List
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Task != nil {
		toSerialize["task"] = o.Task
	}
	return json.Marshal(toSerialize)
}

type NullableBacklogBacklogTask struct {
	value *BacklogBacklogTask
	isSet bool
}

func (v NullableBacklogBacklogTask) Get() *BacklogBacklogTask {
	return v.value
}

func (v *NullableBacklogBacklogTask) Set(val *BacklogBacklogTask) {
	v.value = val
	v.isSet = true
}

func (v NullableBacklogBacklogTask) IsSet() bool {
	return v.isSet
}

func (v *NullableBacklogBacklogTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBacklogBacklogTask(val *BacklogBacklogTask) *NullableBacklogBacklogTask {
	return &NullableBacklogBacklogTask{value: val, isSet: true}
}

func (v NullableBacklogBacklogTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBacklogBacklogTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
