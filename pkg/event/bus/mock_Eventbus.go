// Code generated by mockery v2.5.1. DO NOT EDIT.

package bus

import (
	context "context"

	event "github.com/peteqproj/peteq/pkg/event"
	handler "github.com/peteqproj/peteq/pkg/event/handler"

	mock "github.com/stretchr/testify/mock"
)

// MockEventbus is an autogenerated mock type for the Eventbus type
type MockEventbus struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, ev
func (_m *MockEventbus) Publish(ctx context.Context, ev event.Event) (string, error) {
	ret := _m.Called(ctx, ev)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, event.Event) string); ok {
		r0 = rf(ctx, ev)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, event.Event) error); ok {
		r1 = rf(ctx, ev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *MockEventbus) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *MockEventbus) Stop() {
	_m.Called()
}

// Subscribe provides a mock function with given fields: name, _a1
func (_m *MockEventbus) Subscribe(name string, _a1 handler.EventHandler) {
	_m.Called(name, _a1)
}
