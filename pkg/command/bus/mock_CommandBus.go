// Code generated by mockery v2.5.1. DO NOT EDIT.

package bus

import (
	context "context"

	handler "github.com/peteqproj/peteq/pkg/command/handler"
	mock "github.com/stretchr/testify/mock"
)

// MockCommandBus is an autogenerated mock type for the CommandBus type
type MockCommandBus struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, name, arguments
func (_m *MockCommandBus) Execute(ctx context.Context, name string, arguments interface{}) error {
	ret := _m.Called(ctx, name, arguments)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, name, arguments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterHandler provides a mock function with given fields: name, ch
func (_m *MockCommandBus) RegisterHandler(name string, ch handler.CommandHandler) error {
	ret := _m.Called(name, ch)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, handler.CommandHandler) error); ok {
		r0 = rf(name, ch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockCommandBus) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
